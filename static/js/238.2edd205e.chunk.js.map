{"version":3,"file":"static/js/238.2edd205e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/contact-list/contact-list.module.css?97b9","components/contact-list/contact-list.jsx","webpack://goit-react-hw-08-phonebook/./src/components/contact-form/contact-form.module.css?abe5","../node_modules/nanoid/index.browser.js","components/contact-form/contact-form.jsx","webpack://goit-react-hw-08-phonebook/./src/components/filter/filter.module.css?56b3","components/filter/filter.jsx","pages/Contacts.js","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contact-list_contactList__1wMMn\",\"contactItem\":\"contact-list_contactItem__r5Jox\",\"contactDetails\":\"contact-list_contactDetails__kEU75\",\"deleteButton\":\"contact-list_deleteButton__yXVlH\"};","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './contact-list.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts, selectStatusFilter } from 'redux/selectors';\nimport { fetchContacts, deleteContact } from 'services/contactsApi';\n\nfunction ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filtered = useSelector(selectStatusFilter);\n\n  const normalizedFilter = filtered.toLowerCase();\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <li key={id} className={css.contactItem}>\n          <p className={css.contactDetails}>\n            {name}: {number}\n          </p>\n          <button\n            className={css.deleteButton}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            ❌\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  onDelete: PropTypes.func,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"contact-form_contactForm__VYILe\",\"contactNameForm\":\"contact-form_contactNameForm__yciTh\",\"contactLabel\":\"contact-form_contactLabel__MtvGb\",\"contactInput\":\"contact-form_contactInput__yPIoE\",\"addContactBtn\":\"contact-form_addContactBtn__uZTfM\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React from 'react';\nimport Notiflix from 'notiflix';\nimport css from './contact-form.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'services/contactsApi';\nimport { selectContacts } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const [contactName, setContactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (contacts.some(({ name }) => name === contactName)) {\n      Notiflix.Notify.failure(`${contactName} is already in your contacts`);\n      return;\n    }\n\n    if (contacts.some(contact => contact.number === number)) {\n      Notiflix.Notify.failure(\n        `This number - ${number} is already in your contacts`\n      );\n      return;\n    }\n\n    dispatch(\n      addContact({\n        name: contactName,\n        number,\n        id: nanoid(),\n      })\n    );\n\n    setContactName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    let sanitizedValue = value;\n\n    if (name === 'name') {\n      sanitizedValue = value.replace(/[^a-zA-Zа-яА-Я\\s'-]/g, '');\n      setContactName(sanitizedValue);\n    } else if (name === 'number') {\n      sanitizedValue = value.replace(/[^0-9\\s()-+]/g, '');\n      setNumber(sanitizedValue);\n    }\n  };\n\n  return (\n    <form className={css.contactNameForm} onSubmit={handleSubmit}>\n      <label className={css.contactLabel} htmlFor=\"contact-name\">\n        Name\n      </label>\n      <input\n        id=\"contact-name\"\n        type=\"text\"\n        name=\"name\"\n        value={contactName}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <label className={css.contactLabel} htmlFor=\"contact-number\">\n        Number\n      </label>\n      <input\n        id=\"contact-number\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <button type=\"submit\" className={css.addContactBtn}>\n        ✅\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"filter_filterContainer__T8iLN\",\"filterLabel\":\"filter_filterLabel__3HlzA\",\"filterInput\":\"filter_filterInput__Hvnfk\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/actions';\n\nimport { selectStatusFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <div className={css.filterContainer}>\n      <label className={css.filterLabel}>Find contacts by name</label>\n      <input type=\"text\" name={filter} value={filter} onChange={onChange} />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import ContactForm from 'components/contact-form/contact-form';\nimport ContactList from 'components/contact-list/contact-list';\nimport { Filter } from 'components/filter/filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'services/contactsApi';\nimport { selectError, selectIsLoading } from 'redux/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <title>Contacts</title>\n      {isLoading && !error && <b>Loading...</b>}\n      <ContactList />\n    </div>\n  );\n}\n","export const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn;\nexport const selectUser = state => state.auth.user;\nexport const selectIsRefreshing = state => state.auth.isRefreshing;\nexport const selectIsFetching = state => state.auth.isFetching;\n"],"names":["dispatch","useDispatch","contacts","useSelector","selectContacts","normalizedFilter","selectStatusFilter","toLowerCase","filteredContacts","filter","name","includes","useEffect","fetchContacts","className","css","map","id","number","type","onClick","deleteContact","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useState","contactName","setContactName","setNumber","handleChange","event","target","value","sanitizedValue","replace","onSubmit","preventDefault","some","Notiflix","contact","addContact","htmlFor","onChange","pattern","title","required","Filter","e","setFilter","Contacts","isLoading","selectIsLoading","error","selectError","state","items"],"sourceRoot":""}